#+SETUPFILE: ~/.emacs.d/org-templates/new-setup/setup-default-with-tweaks.org
# #+SETUPFILE: ~/.emacs.d/org-templates/new-setup/setup-default.org
* Overture

- eval namespace and parameters subtree
** start sound
*** crackling blips (30 sec)                                           :good:

#+begin_src sclang :results none
// short crackl
play{
  2.collect{
    RecordBuf.ar(Limiter.ar(HPF.ar(Convolution2.ar(k=Crackle.ar(l=Line.kr(1, 2, 30)), b=LocalBuf(2048), Dust.kr(4)), 8)+k)*(2-l), b)
  }
}
#+end_src
*** crackling blips (inf)
#+begin_src sclang :results none
play{
  2.collect{
    RecordBuf.ar(Limiter.ar(HPF.ar(Convolution2.ar(k=Crackle.ar(l=Line.kr(1, 2, 240)), b=LocalBuf(2048), Dust.kr(4)), 8)+k)*(2-l), b)
  }
}
#+end_src
*** 
* Part I

** code 1 :: overtone                                             :essential:
*** require the essential namespaces
# EVAL THIS SUBTREE FIRST
#+begin_src clojure :results silent :show-process t
(require '[quil.core :as q])
(require '[quil.middleware :as m])
(require '[quil.helpers.seqs :as s])
(require '[quil.helpers.calc :as c])
;; (use 'overtone.live)
#+end_src

*** create eight parameters
#+BEGIN_SRC clojure :results silent :show-process t
(def param1 (atom 2.0))
(def param2 (atom 1600.0))
(def param3 (atom 0.02))
(def param4 (atom 10))

(def param5 (atom 50))
(def param6 (atom 50))
(def param7 (atom 100))
(def param8 (atom 100))
#+END_SRC

*** create an event handler for eight CC events
#+begin_src clojure :results silent :show-process t
  ;; relies on the ~rad-atom~ var

  (on-event [:midi :control-change]
	    (fn [{cc-channel :note vel :velocity}]
	      (case cc-channel
		1 (do (println (list cc-channel vel @param1))
		      (reset! param1 (* 0.1 vel)))
		2 (do (println (list cc-channel vel @param2))
		      (reset! param2 (* 10 vel)))
		3 (do (println (list cc-channel vel @param3))
		      (reset! param3 (scale-range vel 0 127 0.089 0.15)))
		4 (do (println (list cc-channel vel @param4))
		      (reset! param4 (* 0.0001 vel)))
		5 (do (println (list cc-channel vel @param5))
		      (reset! param5 (scale-range vel 0 127 5.0 975.0)))
		6 (do (println (list cc-channel vel @param6))
		      (reset! param6 (scale-range vel 0 127 5.0 975.0)))
		7 (do (println (list cc-channel vel @param7))
		      (reset! param7 (scale-range vel 0 127 0.0 1500.0)))
		8 (do (println (list cc-channel vel @param8))
		      (reset! param8 (scale-range vel 0 127 0.0 1500.0)))
		))
	    ::an-8param-resetter)

#+end_src

*** update-map-entries fn
#+begin_src clojure :results silent :show-process t
(defn update-map-entries[m e]
     (reduce #(update-in %1 [(first %2)] (fn[_](last %2))) m e))
#+end_src

** test (not used)
*** remove event handler
Stuff
#+BEGIN_SRC clojure :results silent :show-process t
(remove-event-handler ::an-8param-resetter)
#+END_SRC
*** try out a basic background synth
#+begin_src clojure :results silent :show-process t
  ((synth (out 0 (hold (comb-n (rlpf (dust [12 15]) (+ 1600 (* 1200 (lf-noise1 [1/3, 1/4]))) (+ 0.02)) 2 1 10) 2 :done FREE))))

  ((synth (out 0 (hold
		  (comb-n
		   (rlpf
		    (dust [12 15]) ;; param1
		    (+ 1600
		       (* 1200 ;; param2
			  (lf-noise1 [1/3, 1/4])))
		    (+ 0.02)) ;; param3
		   2
		   1
		   10) ;; param4
		  2 ;; param ??
		  :done FREE))))
#+end_src

*** load 50 images--uses draw-state and update-state functions         :good:
Will now open resizable
#+begin_src clojure :results silent :show-process t
    ;; (ns present-intersect.images
    ;;   (:require [quil.core :as q]
    ;;             [quil.middleware :as m]
    ;;             [quil.helpers.seqs :as s]))

    (def nom (s/seq->stream (cycle [:mov0 :mov1 :mov2 :mov3 :mov4 :mov5 :mov6 :mov7 :mov8 :mov9 :mov10 :mov11 :mov12 :mov13 :mov14 :mov15 :mov16 :mov17 :mov18 :mov19 :mov20 :mov21 :mov22 :mov23 :mov24 :mov25 :mov26 :mov27 :mov28 :mov29 :mov30 :mov31 :mov32 :mov33 :mov34 :mov35 :mov36 :mov37 :mov38 :mov39 :mov40 :mov41 :mov42 :mov43 :mov44 :mov45 :mov46 :mov47 ])))

(defn setup [] (q/frame-rate 10)
      {:images {:mov0 (q/load-image "00000.jpg")
		:mov1 (q/load-image "00001.jpg")
		:mov2 (q/load-image "00002.jpg")
		:mov3 (q/load-image "00003.jpg")
		:mov4 (q/load-image "00004.jpg")
		:mov5 (q/load-image "00005.jpg")
		:mov6 (q/load-image "00006.jpg")
		:mov7 (q/load-image "00007.jpg")
		:mov8 (q/load-image "00008.jpg")
		:mov9 (q/load-image "00009.jpg")
		:mov10 (q/load-image "00010.jpg")
		:mov11 (q/load-image "00011.jpg")
		:mov12 (q/load-image "00012.jpg") :mov13 (q/load-image "00013.jpg") :mov14 (q/load-image "00014.jpg") :mov15 (q/load-image "00015.jpg")  :mov16 (q/load-image "00016.jpg") :mov17 (q/load-image "00017.jpg") :mov18 (q/load-image "00018.jpg") :mov19 (q/load-image "00019.jpg") :mov20 (q/load-image "00020.jpg")  :mov21 (q/load-image "00021.jpg")  :mov22 (q/load-image "00022.jpg")  :mov23 (q/load-image "00023.jpg") :mov24 (q/load-image "00024.jpg") :mov25 (q/load-image "00025.jpg") :mov26 (q/load-image "00026.jpg") :mov27 (q/load-image "00027.jpg") :mov28 (q/load-image "00028.jpg") :mov29 (q/load-image "00029.jpg") :mov30 (q/load-image "00030.jpg") :mov31 (q/load-image "00031.jpg") :mov32 (q/load-image "00032.jpg") :mov33 (q/load-image "00033.jpg") :mov34 (q/load-image "00034.jpg") :mov35 (q/load-image "00035.jpg") :mov36 (q/load-image "00036.jpg") :mov37 (q/load-image "00037.jpg") :mov38 (q/load-image "00038.jpg") :mov39 (q/load-image "00039.jpg") :mov40 (q/load-image "00040.jpg") :mov41 (q/load-image "00041.jpg") :mov42 (q/load-image "00042.jpg") :mov43 (q/load-image "00043.jpg") :mov44 (q/load-image "00044.jpg") :mov45 (q/load-image "00045.jpg") :mov46 (q/load-image "00046.jpg") :mov47 (q/load-image "00047.jpg") 
		}
      :nom-de-fn nom}
      )

    
    ;;; should use all the following eventually

    ;; (defn load-image [image]
    ;;   (let [path (str (name image) ".jpg")]
    ;;     (q/request-image path)))

    ;; (defn draw-image [state k [x y]]
    ;;   (q/image (get-in state [:images k]) x y))

    ;; (defn setup []
    ;;   (q/frame-rate 25)
    ;;   ;; (q/color-mode :rgb)
    ;;   (q/image-mode :center)
    ;;   {:images (zipmap images (map load-image images))})

    (defn update-state [state]
      (identity state))

    (defn draw-state [state]
      (q/image (get-in state [:images ((:nom-de-fn state))]) 0 0))

    (defn key-pressed [state event] (identity state))

    (q/defsketch aname
      :title "the tune"
       :size [1080 960]
       :setup setup
       :update update-state
      :draw draw-state
      :features [
		 ;; :present 
		 :resizable]
      :key-pressed key-pressed
      :middleware [m/fun-mode m/pause-on-error])


#+end_src

** now add overtone synth (needs good high qvalues)                    :good:
#+begin_src clojure :results silent :show-process t
  (defn draw-state [state]
(do ((synth (out 0 (hold (comb-n (rlpf (dust [@param1 15]) (+ 1600 (* @param2 (lf-noise1 [1/3, 1/4]))) (+ 0.01 @param4)) 2 0.1 10) @param3 :done FREE))))
    (q/image (get-in state [:images ((:nom-de-fn state))]) 0 0)))
#+end_src

** 
* /Intro to Format/
0:00:00 
The outline that I sketched in my proposal for this presentation stated that this would be a unique kind of live-coding, lecture-demonstration. So, on the left you'll be seeing the document that contains the text I am working off, as well as bits of code and various markup characters and symbols that I'm using to generate the sounds you hear and the images you see to the right.

What should you choose to focus on? 

Yes. 

* /Title/
Hmm
** Title
The title Different Trains, which is a reference and tribute to a Steve Reich piece of the same name, among other things evokes a very 19th Century form of mobility and organization, a landscape-altering technological "innovation" that's still around today.

But my topic here is a... *21st Century* effort...--similarly large in scope, top-down and potentially landscape-altering--to "enhance" our educational system. But what relevance is all of this, to us, here, at this arts and technology symposium? 
0:01:00 
** code 3 (for SHORT debugging params 3 and 4)                         :good:
*** start dust synth (frame-rate of 1 fps means short sounds)          :
- start a background dust synth, using params in ~state~, via a provisional sketch that instantiates new synths on each frame

#+begin_src clojure :results silent :show-process t
      (q/defsketch empty-noise
      :size [100 100]
      :setup #(do (q/frame-rate 1) {:x 0 :y 0 :r 1})
      :draw (fn my-draw [state] ((synth (out 0 (hold (comb-n (rlpf (dust [@param1 15]) (+ 1600 (* @param2 (lf-noise1 [1/3, 1/4]))) (+ 0.01 @param4)) 2 0.1 10) @param3 :done FREE)))))
:key-pressed
(fn [state event] (identity state))

      :middleware [m/fun-mode m/pause-on-error]
    )
#+end_src
** 

* /Explanation/
** assertions
In my proposal, I asserted that this particular 21st Century effort, which for convenience sake we'll say is being lead by a U.S. government agency, the  National Science Foundation--but we could also say is being led by your, my, our, collective appetite for technological innovations--posed a threat to artists' livelihoods, not to mention the general well-being, or even soul, of our society. Is that just hyperbole? What does your friendly neighborhood scientist and her boss at the NSF have to do with our soul? 

To put some flesh on the bones of all this, some background might be in order. A proper overview of education really is more of an endeavor suitable to a historian, but I'll just give you a quick gloss on the history of education, with a bias towards recent U.S history. 
** examples
The Socratic method; the Confucian analects;The Trivium/Quadrivium of Classical Education; Scholasticism; the Grand Tour of Europe; the Prussian model of Wilhelm von Humboldt; liberal arts colleges vs. research institutions; the founding of the College Board; John Dewey, Piaget and the pedagogy of Constructivism; agricultural and vocational training; Scopes-Monkey trial and creationism; the U.S. GI-bill; Albert Schanker and the Teachers Union; ecnomist Milton Friedman and the growth of "educational choice" movement;the home-school movement; The creation of Department of Education in 1979; educational reform beginning with NCLB, leading to Common Core State Standards, Race to the Top and various efforts to define national standards; the influence of The Gates Foundation, The Walton Foundation and various private foundations; various dysfunctional struggles between advocates of local, state and federal control; high-stakes testing, project based learning; entrance of Google among other ed tech and for-profit organizations; flipped classrooms, blended learning; Betsey DeVos; MOOCs, magnets, microschools; charters and vouchers.

The phrase that comes to mind is "free-for-all," (and not in the monetary sense). The history is one of visions and revisions, as each society adjusts to itself and it's evaluation of what it should value.

0:03:39 
0:03:39 
0:03:42 
0:03:32 
** code 4 (not used)

*** create circle sketch                                                 :ok:
- create a sketch with growing circles and re-evaluate update functions
#+BEGIN_SRC clojure :results silent :show-process nil
(defn my_setup []  {:diam 10 :param1 @param1 :frame-rate 2 :cent-x (/ (q/width) 2) :cent-y (/ (q/height) 2)})
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process nil
  ;; (defn my_draw [state] (q/frame-rate (:frame-rate state)) (q/background 180))
  (defn my_draw [state]
    (q/frame-rate (:frame-rate state))
    (if (< (:diam state) 1820)
      (do (q/background 180) (q/ellipse (:cent-x state) (:cent-y state) (:diam state) (:diam state)))
      (q/background 10)))
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process nil
;; (defn my_update [state] (identity state ))
(defn my_update [state] (update state :diam + @param1))
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process nil
      (q/defsketch change-fr
	:title "Growing circle"
	:setup my_setup
	:update my_update
	:draw my_draw
	;; :features [:keep-on-top]
	:key-pressed (fn keyp [state event] (identity state)) 
	:middleware [m/fun-mode 
  m/pause-on-error
  ]
	:size [800 300]
	;; :keep-on-top true
    )
#+END_SRC

# not so hot cuz static
#+BEGIN_SRC clojure :results silent :show-process t

(defn my_update [state] (assoc state :frame-rate 10))
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process t
  ;; (defn my_update [state] (do (assoc state :diam 10 :frame-rate 1 :param1 @param1) (update state :diam + @param1)))
  (defn my_update [state] (do (update state :diam + @param1)))
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process t
;; function defined from reduce clojuredocs
  (defn my_update [state] (update-map-entries state {:diam 10 :frame-rate 1}))
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process t
;; function defined from reduce clojuredocs
  (defn my_update [state] (do (update-map-entries state {:diam 10 :frame-rate 10}) (update state :diam + @param1)))
#+END_SRC

#+BEGIN_SRC clojure :results silent :show-process t
;; function defined from reduce clojuredocs
  (defn my_update [state] (do (update-map-entries state {:diam 10 :frame-rate 1}) (update state :diam + @param1)))
#+END_SRC



ONLY AFTER SKETCH IS RUNNING!
#+BEGIN_SRC clojure :results output
(println @(:state (meta change-fr)))
#+END_SRC

#+RESULTS:
: {:diam 378.29999999999984, :param1 12.700000000000001, :frame-rate 2, :cent-x 400, :cent-y 150}

** /What is STEM? What does it say about itself?/

So, specifically what role has science education played throughout all that, and what about this society's push behind all things science, technology, engineering and mathematics, that magical quadrumvirate, STEM? And what, you might ask, do artists have to do with it? Yes.

As someone trained as a musician, who has worked many years as an educator, but who now spends a lot of time at his computer, doing whatever you call this, I'm a keen observer of all things used to distinguish the various sciences from "the arts."

I'd like to offer up perhaps one example of such a distinction: According to one of the contributors of the National Research Council's /A Framework for K-12 Science Education/, we know that "science is the key to solving the world's most pressing challenges." [x2]

Well, perhaps that author would like to reconsider exactly how he or she chose to word that. But, surely, impending ecological disaster, and its political and economic repercussions, are the most pressing challenges he was imagining. Which is reasonable. 

Now, aside from mitigating climate change and, you know, biological extinction, the authors' goals begin to involve more diffuse questions of appreciating "the beauty and wonder of science", as well as more nitty-gritty problems of "career choice." We have very quickly moved out of the lab and away from problems for which the scientific method was tuned. 
0:05:03 
** [#A] code 5

*** gen_art19                                                          :good:
Large ~mk-lines-stream~ fun (Inspect values used for centering lines)
#+BEGIN_SRC clojure :results silent :show-process t
(defn mk-lines-stream
    []
    (let [half-width   (/ (q/width) 1.1)
	  half-height  (/ (q/height) 1.1)
	  radius-steps (s/steps (q/random 10) 0.5)
	  angle-steps  (s/steps (q/random 10) 0.5)
	  x-steps      (s/steps (q/random 10) 10.1)
	  x-noises     (map q/noise x-steps)
	  y-steps      (s/steps (q/random 10) 10.1)
	  y-noises     (map q/noise y-steps)
	  angle-noises (map q/noise angle-steps)
	  angle-noises (c/mul-add angle-noises 6 -3)
	  angles       (s/steps (- (/ q/PI 2)) angle-noises)
	  angles       (map #(mod % 360) angles)
	  rads         (map q/radians angles)
	  center-xs    (c/mul-add x-noises @param7 (- half-width @param5))
	  center-ys    (c/mul-add y-noises @param8 (- half-height @param6))
	  radii        (map q/noise radius-steps)
	  radii        (c/mul-add radii 550 1)
	  cos-rads     (map q/cos rads)
	  sin-rads     (map q/sin rads)
	  opp-rads     (map #(+ q/PI %) rads)
	  cos-opp-rads (map q/cos opp-rads)
	  sin-opp-rads (map q/sin opp-rads)
	  x1s          (c/mul-add cos-rads radii center-xs)
	  y1s          (c/mul-add sin-rads radii center-ys)
	  x2s          (c/mul-add cos-opp-rads radii center-xs)
	  y2s          (c/mul-add sin-opp-rads radii center-ys)
	  lines        (map list x1s y1s x2s y2s)]
      (s/seq->stream lines)))

(defn mk-cols-stream
    []
    (let [stroke-cols (s/cycle-between 0 255)]
      (s/seq->stream stroke-cols)))

  (defn setup []
    (q/smooth)
    (q/frame-rate 30)
    (q/background 255)
    (q/no-fill)
    (q/stroke-weight 3)
    (q/set-state! :lines-str (mk-lines-stream)
		  :cols-str (mk-cols-stream)))

#+END_SRC

# Draw function
Revise initial draw to include dusty-synth
#+BEGIN_SRC clojure :results silent :show-process t
  (defn draw []
    (let [lines-str (q/state :lines-str)
	  cols-str  (q/state :cols-str)
	  line-args (lines-str)
	  col       (cols-str)]
      (q/stroke col 60)
      (apply q/line line-args)
;;      ((synth (out 0 (hold (comb-n (rlpf (dust [@param1 15]) (+ 1600 (* @param2 (lf-noise1 [1/3, 1/4]))) (+ 0.01 @param4)) 2 0.1 10) @param3 :done FREE))))
))
#+END_SRC

# sketch macro
Create gen-art 19 sketch
#+BEGIN_SRC clojure :results silent :show-process t
  (q/defsketch gen-art-19
    :title "Wave Clock"
    :setup setup
    :middleware [m/pause-on-error]
    :draw draw
    :size [600 600]

    ;; :size :fullscreen
    :features [
	       ;; :present 
	       :resizable]
    )
#+END_SRC

#+BEGIN_SRC clojure :results output :show-process t
(println @(:state (meta gen-art-19)))
#+END_SRC

#+RESULTS:
: {:cols-str #function[quil.helpers.seqs/seq->stream/fn--772], :lines-str #function[quil.helpers.seqs/seq->stream/fn--772]}

** code 3
*** easier blips (inf)                                                  :good:
#+begin_src sclang :results none
// easier blips
play{
  p=PinkNoise.ar(1!2);
  BRF.ar(p+Blip.ar(p+2, 400), 150, 2, 0.1)+LPF.ar(FreeVerb2.ar(*LPF.ar(p+0.2*Dust.ar(0.1), 60)++[1, 1, 0.2, 1e4]).tanh, 2000)
}
#+end_src
0:00:00 
* /critique/

Now, as a self-identified--for lack of a better term--"digital artist/humanist," 

I read this document, or hear claims about the importance of STEM skills for say pre schoolers, and, once I'm finished gritting my teeth, I think, huh, I wonder.

I wonder what problems does art solve? What is its importance in the 21st century? Why does anybody bother making art or becoming an art teacher? What are we doing, what are we missing, as a society, when we parrot these claims? And what does it mean that a music video sung in Korean by a man pretending to ride a horse forced YouTube engineers to upgrade to using 64-bit integer representation to count "plays?"

But, once I'm done wondering, I also note that the word art does not appear, in the NRC framework or in the general conversation. I take such omissions as clues to a pervasive mindset shared by too many. 

The authors assert their belief that, in making a science standard, there needs to "coherence across all subject areas of the K-12 curriculum," but art is not one of those areas. By contrast, an attempt to draw up a similar Standards document for the Arts referenced the mathematics CC standard throughout, including it wholesale in an appendix. 

Which brings us to perhaps the most important fundamental difference. 

Arts educators must reach outwards--the precarious status of the arts within our society demands as much. Scientists, however, appear to know that the decks are stacked in their favor--utilitas vincit omnia.

0:09:25 
0:07:23 
* /against insularity/
But this isn't an argument that we don't need better science education. You might even say it is an argument /for/ a particular approach to accomplishing that goal of better science education.

Whatever the case, it is unequivocally an argument against the insularity that comes from epistemic arrogance and chauvinism--my knowledge is better than yours--at the very moment we most need the things artists are customarily associated with: creativity and inspiration and even critical thinking.

Now, In the belief that espousing the virtues of art at an arts symposium smacks of pandering,


* Fun STEM interlude
For all their supposed differences, what is something that unites the arts and sciences?

Well though science is rife with them, we don't find fundamental natural laws easily expressed in an equation that "explain" art or allow us to make testable predictions, though evolutionary psychologists, cognitive neuroscienists and Hollywood movie producers may beg to differ.

Arts' raw materials--sound,light--do obey such laws, which helps explain the existence of the most important link between studying art and studying science: patterns.

We can find patterns of all kinds just about everywhere we look, sometimes to our detriment.

Here's a fun one. "Piphilology." The study of mnemonics for memorizing sequences of digits for PI.

Such memorization is easier if we have some way to compress that arbitrary information, but, because the sequence of digits is believed to be random, what pattern do you use to achieve that compression?

The writer Issac Asimov apparently came up with a way to remember the first 15--"How I want a drink, alcoholic of course, after the heavy lectures involving quantum mechanics." Where the length of each word--3 letters in "how", 1 letter in "I", 4 letters in "want," etc.--gives the digit in question.

This particular mnemonic does not, unfortunately, appear in the /Framework for K-12 Science Education/
0:09:56 
* Part II 
* /Transition/
I'd like to imagine, what if we could start over? What about recovering the humanist impulse in scientific endeavors, wherever it can be found, before the inevitability of STEM thinking settled in?

I will outline one such notion, after briefly mentioning some of my "humanistic" tools.
* /Digital Humanists/
One of the things I'm using _here_ is the concept of Literate programming. Literate programs intermingle text and code in a way that reflects the fact that, as the saying goes, software is written once, but read many times over.

Additionally, the application, Emacs, I'm using to run this whole thing is "just" a text editor. But it and virtually everything else under the hood here is Free Software, a movement with a kind of liberation theology that we need to hear a lot more about, rather than bromides about mere "openness."

Finally, deeper within the confines of computer science proper, is the, dare I say, cultural tradition around the second oldest programming language still in use, Lisp, which ultimately binds all these elements together here. 
0:11:45 
* /Names and Languages/
0:14:40 

To me, the most powerful metaphor we have, you might even say our only innate technology, is language. 

Here's a quote from a classic book about Computer Science

#+begin_quote
I think in the future people will look back and say, yes, those primitives in the 20th century were
fiddling around with these gadgets called computers, but really what they were doing is starting to learn how to
ormalize intuitions about process, how to *do* things, starting to develop a way to talk precisely about "how-to"
knowledge, as opposed to geometry that talks about what *is* true.
#+end_quote

"To develop a way to talk..." But I thought this was computer science? Well, of course, the author goes on to describe this "way to talk" as, essentially, the computer language that I've already mentioned, Lisp.

Another quote, this from poet Kenneth Koch:

#+begin_quote
One way to get a little more clarity on the subject [of the source of poetry] was suggested to me by a remark of Paul Valéry’s. Thinking about what could be expressed in poetry but not elsewhere, he said that poetry was a separate language or, more specifically, a “language within a language.” There would be, in that case, the ordinary language—for Valéry French, for us English—and, somehow existing inside its boundaries, another: “the language of poetry.”
#+end_quote
** proposal
With these two examples in mind, I propose dividing up the conceptual space of an educational framework more equitably, into three languages or "language areas:" artistic, natural and formal. 

Briefly: 

- /artistic language/ can refer to any artifact or practice that derives from our capacity to communicate using largely non-verbal means

- /natural language/, a term borrowed from linguistics, can encompass both spoken and written communication 

- /formal language/ rather broadly encapsulates both mathematics and computer lanugages, which I consider to be "forms of communication/expression" that rely on a highly rigorous use of symbols

I'd like to think that organizing a pedagogical practice around this notion of three "languages," which happen to babble together wherever artists rely heavily on digital technology, offers better prospects for artists and the arts more generally in an age in thrall to STEM.
0:14:40 
* /Defense of art as a way of thinking/
Now, it is obvious that what I'm outlining above is--as they like to say in the sciences--orthogonal to what the "STEM movement" is all about. 

And what results when you put it all together, as I have tried to do here? For now, I'm perfectly happy with ambivalent, ambiguous answers.

Because I would argue that this ambiguity reflects a kind of thinking that the tidy scientific mode of experiencing the world struggles to accept--and by definition, can't provide--but which sets the arts apart. I hope the outlines of that argument are clear enough here, because I'd like to end by saying that, for now, I wish to simply defend art as a way of thinking, one that must be defended now in an age ever more convinced that it already knows what it needs to know next. The best Art provides something you need, but that you don't "need." Try publishing that in a science journal.

It's okay, it's good...If you walk away saying, I thought I knew what he/it meant while he was talking, but then when it was over, I couldn't really tell you what it was he was saying, or what I thought he was doing. 

Together we will have made something, collaborating on a real time, ambiguous meaning, that no algorithm can do for you. 

And that should be celebrated. Art did its job, leaving you smarter and more confused, less certain and all the wiser for it.
* License
The content of this project itself is licensed under the [[http://creativecommons.org/licenses/by/3.0/us/deed.en_US][Creative Commons Attribution 3.0 license]], and the underlying source code used to format and display that content is licensed under the [[https://www.gnu.org/licenses/gpl-3.0.txt][GNU GPLv3]]
